#!/bin/bash

##	Purpose: Read what's in the clipboard aloud.
##	Args:
##		1 [optional]: Text to read (reads from clipboard otherwise).
##	Copyright and license:
##		Copyright (c) 2022 t00mietum.
##		License GPLv3+: GNU GPL version 3 or later, full text at:
##		    https://www.gnu.org/licenses/gpl-3.0.en.html
##		There is no warranty, to the extent permitted by law.
##	History:
##		20221005 t00mietum:
##			- Created based on this Reddit question:
##			  https://www.reddit.com/r/linuxquestions/comments/ymqcpc/is_there_a_way_to_make_mimic3_read_stuff_from_my/
##		20221005 t00mietum:
##			- Moved dependency checking to it's own function to reduce redundancy.
##			- Added some missing dependency checks.
##			- Slight refactoring for compactness to reflect simplicity.

function fMain(){

	## Args
	local readText="$1"

	## Constants
	local -r scriptName="$(basename "${0}")"
	local    tmpBase="$(mktemp -d -u)"
	local -r tmpWav="${tmpBase}.wav"
	local -r tmpMp3="${tmpBase}.mp3"
	unset tmpBase

	## Help
	case "${readText,,}" in
		"-h"|"--help") echo -e "\nReads text with a spoken voice.\nText comes from the command line, or if not there, the clipboard.\n"; exit 1 ;;
	esac

	## Mimic3 install instruction string
	local howToInstallMimic3=""
	howToInstallMimic3="${howToInstallMimic3}\nmimic3 needs to be installed for this to work."
	howToInstallMimic3="${howToInstallMimic3}\nVisit https://mycroft-ai.gitbook.io/docs/mycroft-technologies/mimic-tts/mimic-3#installation"
	howToInstallMimic3="${howToInstallMimic3}\nOr just try:"
	howToInstallMimic3="${howToInstallMimic3}\npip install --upgrade pip"
	howToInstallMimic3="${howToInstallMimic3}\npip install mycroft-mimic3-tts"
	howToInstallMimic3="${howToInstallMimic3}\n"
	local -r howToInstallMimic3="${howToInstallMimic3}"

	## Validate dependencies
	fVerifyDependency xclip
	fVerifyDependency pip
	fVerifyDependency mimic3 "${howToInstallMimic3}"
	fVerifyDependency mktemp
	fVerifyDependency ffmpeg
	fVerifyDependency xdg-open

	## Get clipboard text if necessary
	[[ -z "${readText}" ]] && readText="$(xclip -o)"

	## Strip off leading/trailing whitespace & make read-only
	local -r readText="$(echo -e "${readText}" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//' 2>/dev/null || true)"

	## Validate
	[[ -z "${readText}" ]] && fThrowError "${FUNCNAME[0]}" "Ain't nothing to read, really."

	## Read to WAV
	echo "[ Converting text to speech ... ]"
	(mimic3 "${readText}" > "${tmpWav}") &>/dev/null

	## Convert to MP3 and delete WAV
	echo "[ Converting output to mp3 ... ]"
	ffmpeg -i "${tmpWav}" -acodec mp3 -ab 256k "${tmpMp3}" &>/dev/null
	rm "${tmpWav}"

	## Open audio player (and hide console output)
	echo "[ Opening "${tmpMp3}" with default audio player ... ]"
	(nohup xdg-open "${tmpMp3}" & disown) &>/dev/null

## Note: If you want to be able to automatically delete the MP3 in this script after playing,
##       you'll need to launch an explicit audio player and wait for it to close,
##       like this, otherwise tmp files will build up until reboot:
# 	vlc "${tmpMp3}" &>/dev/null
# 	echo "[ Cleaning up ... ]"
#	rm "${tmpMp3}"

	echo "[ Done. ]"
	echo

}

function fVerifyDependency(){
	local -r checkForExec="$1"
	local -r customMessage="$2"
	if [[ -z "$(which "${checkForExec}" 2>/dev/null || true)" ]]; then
		fThrowError  ""  "A dependency needs to be installed on this system but isn't: '${checkForExec}'."  "${customMessage}"
	fi
}

function fThrowError(){

	local    funcName="$1"
	local    errText="$2"
	local -r customError="$3"

	if [[ -n "${customError}" ]]; then
		errText="${customError}"
	else
		if [[ -n "${funcName}" ]]; then
			funcName="${scriptName}.${funcName}()"
		else
			funcName="${scriptName}"
		fi
		errText="\nError in '${funcName}': ${errText}\n"
	fi

	echo -e "${errText}"
	exit 1

}

set -e
fMain "$1" "$2"